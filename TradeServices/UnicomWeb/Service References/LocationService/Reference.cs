//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnicomWeb.LocationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouteSet", Namespace="http://schemas.datacontract.org/2004/07/TradeServices.Models")]
    [System.SerializableAttribute()]
    public partial class RouteSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdrressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LongtitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutletNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OutletidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid RouteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RouteNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adrress {
            get {
                return this.AdrressField;
            }
            set {
                if ((object.ReferenceEquals(this.AdrressField, value) != true)) {
                    this.AdrressField = value;
                    this.RaisePropertyChanged("Adrress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Longtitude {
            get {
                return this.LongtitudeField;
            }
            set {
                if ((this.LongtitudeField.Equals(value) != true)) {
                    this.LongtitudeField = value;
                    this.RaisePropertyChanged("Longtitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutletName {
            get {
                return this.OutletNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OutletNameField, value) != true)) {
                    this.OutletNameField = value;
                    this.RaisePropertyChanged("OutletName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Outletid {
            get {
                return this.OutletidField;
            }
            set {
                if ((this.OutletidField.Equals(value) != true)) {
                    this.OutletidField = value;
                    this.RaisePropertyChanged("Outletid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RouteId {
            get {
                return this.RouteIdField;
            }
            set {
                if ((this.RouteIdField.Equals(value) != true)) {
                    this.RouteIdField = value;
                    this.RaisePropertyChanged("RouteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteName {
            get {
                return this.RouteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteNameField, value) != true)) {
                    this.RouteNameField = value;
                    this.RaisePropertyChanged("RouteName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KnownOutletLocation", Namespace="http://schemas.datacontract.org/2004/07/TradeServices.Models")]
    [System.SerializableAttribute()]
    public partial class KnownOutletLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongtitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OutletIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longtitude {
            get {
                return this.LongtitudeField;
            }
            set {
                if ((this.LongtitudeField.Equals(value) != true)) {
                    this.LongtitudeField = value;
                    this.RaisePropertyChanged("Longtitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OutletId {
            get {
                return this.OutletIdField;
            }
            set {
                if ((this.OutletIdField.Equals(value) != true)) {
                    this.OutletIdField = value;
                    this.RaisePropertyChanged("OutletId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LocationService.ILocation")]
    public interface ILocation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetTestString", ReplyAction="http://tempuri.org/ILocation/GetTestStringResponse")]
        string GetTestString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetTestString", ReplyAction="http://tempuri.org/ILocation/GetTestStringResponse")]
        System.Threading.Tasks.Task<string> GetTestStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetAllActiveRoutes", ReplyAction="http://tempuri.org/ILocation/GetAllActiveRoutesResponse")]
        TradeServices.Models.Route[] GetAllActiveRoutes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetAllActiveRoutes", ReplyAction="http://tempuri.org/ILocation/GetAllActiveRoutesResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.Route[]> GetAllActiveRoutesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetRouteTrip", ReplyAction="http://tempuri.org/ILocation/GetRouteTripResponse")]
        TradeServices.Models.RouteTripEx[] GetRouteTrip(string routeTripDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetRouteTrip", ReplyAction="http://tempuri.org/ILocation/GetRouteTripResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.RouteTripEx[]> GetRouteTripAsync(string routeTripDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetCheckIn", ReplyAction="http://tempuri.org/ILocation/GetCheckInResponse")]
        TradeServices.Models.ModelOutletCheckInEx[] GetCheckIn(string routeTripDate, string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetCheckIn", ReplyAction="http://tempuri.org/ILocation/GetCheckInResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.ModelOutletCheckInEx[]> GetCheckInAsync(string routeTripDate, string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetLocationTraking", ReplyAction="http://tempuri.org/ILocation/GetLocationTrakingResponse")]
        TradeServices.Models.ModelRouteTripEx[] GetLocationTraking(string routeTripDate, string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetLocationTraking", ReplyAction="http://tempuri.org/ILocation/GetLocationTrakingResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.ModelRouteTripEx[]> GetLocationTrakingAsync(string routeTripDate, string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetRouteSet", ReplyAction="http://tempuri.org/ILocation/GetRouteSetResponse")]
        UnicomWeb.LocationService.RouteSet[] GetRouteSet(string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetRouteSet", ReplyAction="http://tempuri.org/ILocation/GetRouteSetResponse")]
        System.Threading.Tasks.Task<UnicomWeb.LocationService.RouteSet[]> GetRouteSetAsync(string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetKnownLocation", ReplyAction="http://tempuri.org/ILocation/GetKnownLocationResponse")]
        UnicomWeb.LocationService.KnownOutletLocation[] GetKnownLocation(string outletid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetKnownLocation", ReplyAction="http://tempuri.org/ILocation/GetKnownLocationResponse")]
        System.Threading.Tasks.Task<UnicomWeb.LocationService.KnownOutletLocation[]> GetKnownLocationAsync(string outletid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/SaveApprovedLocation", ReplyAction="http://tempuri.org/ILocation/SaveApprovedLocationResponse")]
        bool SaveApprovedLocation(UnicomWeb.LocationService.KnownOutletLocation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/SaveApprovedLocation", ReplyAction="http://tempuri.org/ILocation/SaveApprovedLocationResponse")]
        System.Threading.Tasks.Task<bool> SaveApprovedLocationAsync(UnicomWeb.LocationService.KnownOutletLocation location);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocationChannel : UnicomWeb.LocationService.ILocation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocationClient : System.ServiceModel.ClientBase<UnicomWeb.LocationService.ILocation>, UnicomWeb.LocationService.ILocation {
        
        public LocationClient() {
        }
        
        public LocationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTestString() {
            return base.Channel.GetTestString();
        }
        
        public System.Threading.Tasks.Task<string> GetTestStringAsync() {
            return base.Channel.GetTestStringAsync();
        }
        
        public TradeServices.Models.Route[] GetAllActiveRoutes() {
            return base.Channel.GetAllActiveRoutes();
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.Route[]> GetAllActiveRoutesAsync() {
            return base.Channel.GetAllActiveRoutesAsync();
        }
        
        public TradeServices.Models.RouteTripEx[] GetRouteTrip(string routeTripDate) {
            return base.Channel.GetRouteTrip(routeTripDate);
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.RouteTripEx[]> GetRouteTripAsync(string routeTripDate) {
            return base.Channel.GetRouteTripAsync(routeTripDate);
        }
        
        public TradeServices.Models.ModelOutletCheckInEx[] GetCheckIn(string routeTripDate, string routeId) {
            return base.Channel.GetCheckIn(routeTripDate, routeId);
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.ModelOutletCheckInEx[]> GetCheckInAsync(string routeTripDate, string routeId) {
            return base.Channel.GetCheckInAsync(routeTripDate, routeId);
        }
        
        public TradeServices.Models.ModelRouteTripEx[] GetLocationTraking(string routeTripDate, string routeId) {
            return base.Channel.GetLocationTraking(routeTripDate, routeId);
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.ModelRouteTripEx[]> GetLocationTrakingAsync(string routeTripDate, string routeId) {
            return base.Channel.GetLocationTrakingAsync(routeTripDate, routeId);
        }
        
        public UnicomWeb.LocationService.RouteSet[] GetRouteSet(string routeId) {
            return base.Channel.GetRouteSet(routeId);
        }
        
        public System.Threading.Tasks.Task<UnicomWeb.LocationService.RouteSet[]> GetRouteSetAsync(string routeId) {
            return base.Channel.GetRouteSetAsync(routeId);
        }
        
        public UnicomWeb.LocationService.KnownOutletLocation[] GetKnownLocation(string outletid) {
            return base.Channel.GetKnownLocation(outletid);
        }
        
        public System.Threading.Tasks.Task<UnicomWeb.LocationService.KnownOutletLocation[]> GetKnownLocationAsync(string outletid) {
            return base.Channel.GetKnownLocationAsync(outletid);
        }
        
        public bool SaveApprovedLocation(UnicomWeb.LocationService.KnownOutletLocation location) {
            return base.Channel.SaveApprovedLocation(location);
        }
        
        public System.Threading.Tasks.Task<bool> SaveApprovedLocationAsync(UnicomWeb.LocationService.KnownOutletLocation location) {
            return base.Channel.SaveApprovedLocationAsync(location);
        }
    }
}

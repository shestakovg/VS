Function externalTest() Export
	Возврат "Тестовое значение";
EndFunction	

Function externalGetNewArray() Export
	Возврат new Array;
EndFunction	

Function externalGetNewMap() Export
	Возврат new Map;
EndFunction	

Function externalGetNewValueTable() Export
	Возврат new ValueTable;
EndFunction	

Function externalGetNewStructure() Export
	Возврат new Structure;
EndFunction	

Function externalGetNewOrderPosValueTable() Export
	struct= new ValueTable;
	struct.Колонки.Добавить("Номенклатура",,"Номенклатура");
	struct.Колонки.Добавить("cnt",,"cnt");
	struct.Колонки.Добавить("cnt_conf",,"cnt_conf");
	Возврат struct;
EndFunction	

Function externalGetValueTableRowCell(rowIndex, colIndex, valueTable) Export
	If valueTable = Undefined Then
		Возврат Undefined;
	EndIf;
	row=valueTable.Get(rowIndex);
	Возврат row.Get(colIndex);
EndFunction	

Procedure externalAddPos(valTable, Nomenclature, cnt) Export
	newRow=valTable.Add();
	newRow.Номенклатура=Nomenclature;
	newRow.cnt=cnt;
	newRow.cnt_conf=0;
EndProcedure

Function externalGetStructureValue(structure, structureKey) Export
	Var value;
	structure.Property(structureKey, value);
	Возврат value;
EndFunction	


Функция ЗаказВключенВМАршрутныйЛист(ЗаказСсылка)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТаблицаОтгрузки.Заказ,
		|	ТаблицаОтгрузки.Ссылка КАК МаршрутныйЛист
		|ИЗ
		|	Документ.МаршрутныйЛист.Отгрузки КАК ТаблицаОтгрузки
		|ГДЕ
		|	ТаблицаОтгрузки.Заказ = &Ссылка
		|	И ТаблицаОтгрузки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)");
							  
		Запрос.УстановитьПараметр("Ссылка"	, ЗаказСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
				//Сообщить("Документ " + ЗаказСсылка + " включен в маршрутный лист " + Выборка.МаршрутныйЛист+". Изменять дату отгрузки запрещено");
				Возврат Выборка.МаршрутныйЛист;
		КонецЕсли;
		Возврат Неопределено;
	КонецФункции
Функция внутрПолучитьПартнераПоКонрагенту(Контрагент) 
	Запрос= Новый Запрос("Выбрать Партнер  из Справочник.Контрагенты где Ссылка=&Контрагент");
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	РезультатЗапроса=Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Партнер;
	КонецЕсли;	
КонецФункции	
Функция внутрПолучитьКонтрагентаПоТорговойТочке(ТорговаяТочка) 
	Запрос = Новый Запрос("Выбрать Владелец как Контрагент, Организация из Справочник.ТорговыеТочкиКонтрагентов где Ссылка=&ТорговаяТочка");
	Результат = Новый Структура;
	Запрос.УстановитьПараметр("ТорговаяТочка",ТорговаяТочка);
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Вставить("Контрагент", Выборка.Контрагент);
		Результат.Вставить("Организация", Выборка.Организация);
		Возврат Результат;
	КонецЕсли;	
КонецФункции	

Функция внутрПолучитьИнфПоСоглашению(Дата, Партнер, Организация)  
	 Результат=Новый Структура;
	 ЕстьСоглашение=Ложь;

	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	МАКСИМУМ(СОглашенияСКлиентами.Ссылка) КАК соглашение
	                       |ИЗ
	                       |	Справочник.СоглашенияСКлиентами КАК СОглашенияСКлиентами
	                       |ГДЕ
	                       |	СОглашенияСКлиентами.Партнер = &Партнер
	                       |	И СОглашенияСКлиентами.Организация = &Организация
	                       |	И СОглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)");
	 						   
	 							   
	 Запрос.УстановитьПараметр("Партнер", Партнер);
	 Запрос.УстановитьПараметр("Организация", Организация);
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Не Выборка.Количество()>0 Тогда
			Результат.Вставить("ЕстьСоглашение",ЕстьСоглашение);					
			Возврат Результат;
	 Иначе
		    Выборка.Следующий();
		 	Результат.Вставить("Соглашение",Выборка.соглашение);					
			ТекущееСоглашение =  Выборка.соглашение;
	 КонецЕсли;	 
	 ТекстЗапросаПоискПервого="ВЫБРАТЬ
	                          |	СоглашенияСКлиентами.Контрагент,
	                          |	СоглашенияСКлиентами.Ссылка КАК Соглашение,
	                          |	СоглашенияСКлиентами.ГрафикОплаты,
	                          |	СоглашенияСКлиентами.ХозяйственнаяОперация,
	                          |	СоглашенияСКлиентами.ВидЦен,
	                          |	СоглашенияСКлиентами.НалогообложениеНДС,
	                          |	СоглашенияСКлиентами.ФормаОплаты,
	                          |	СоглашенияСКлиентами.Валюта,
	                          |	Этапы.ВариантОплаты,
	                          |	Этапы.Сдвиг,
	                          |	Этапы.ПроцентПлатежа
	                          |ИЗ
	                          |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК Этапы
	                          |		ПО (Этапы.Ссылка = СоглашенияСКлиентами.ГрафикОплаты)
	                          |ГДЕ
	                          |	СоглашенияСКлиентами.Ссылка = &Соглашение";
	Запрос= Новый Запрос(ТекстЗапросаПоискПервого);
	Запрос.УстановитьПараметр("Соглашение",ТекущееСоглашение);
	РезультатЗапроса=Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Выборка=РезультатЗапроса.Выбрать();
		Если Выборка.Количество()>0 Тогда
			Выборка.Следующий();
			ЕстьСоглашение=Истина;
			Результат.Вставить("Соглашение",Выборка.Соглашение);
			Результат.Вставить("ГрафикОплаты",Выборка.ГрафикОплаты);
			Результат.Вставить("ВариантОплаты",Выборка.ВариантОплаты);
			Результат.Вставить("Сдвиг",Выборка.Сдвиг);
			Результат.Вставить("ПроцентПлатежа",Выборка.ПроцентПлатежа);
			Результат.Вставить("ВидЦен",Выборка.ВидЦен);
			Результат.Вставить("НалогообложениеНДС",Выборка.НалогообложениеНДС);
			Результат.Вставить("ХозяйственнаяОперация",Выборка.ХозяйственнаяОперация);
			Результат.Вставить("ФормаОплаты",Выборка.ФормаОплаты);
			Результат.Вставить("Валюта",Выборка.Валюта);
		КонецЕсли;	
	КонецЕсли;
	Результат.Вставить("ЕстьСоглашение",ЕстьСоглашение);					
	Возврат Результат;
КонецФункции	

Функция внутрПолучитьЦену(Дата, Номенклатура, СтруктураСоглашения) 
	 Результат=Новый Структура;
	 Цена=0;
	 ВидЦены=СтруктураСоглашения.ВидЦен;
	 ТекстЗапроса="ВЫБРАТЬ
						|	ЦеныНоменклатурыСрезПоследних.Цена  
						| ИЗ
						|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
						|			&ДатаЦен,
						|			ВидЦены = &ВидЦены
						|				И Номенклатура = &Номенклатура
						|				И Валюта = &Валюта) КАК ЦеныНоменклатурыСрезПоследних";
	 Запрос=Новый Запрос(ТекстЗапроса);						
	 Запрос.УстановитьПараметр("ДатаЦен", Дата);
	 Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	 Запрос.УстановитьПараметр("Валюта", СтруктураСоглашения.Валюта);
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
 	 РезультатЗапроса=Запрос.Выполнить();
	 Если не РезультатЗапроса.Пустой() Тогда
		Выборка=РезультатЗапроса.Выбрать();
		Если Выборка.Количество()>0 Тогда
			Выборка.Следующий();
			Цена=Выборка.Цена;
		КонецЕсли;	
	 КонецЕсли;
	 Результат.Вставить("Цена",Цена); 
	 Возврат  Результат;
КонецФункции	



Function externalCreateOrder(orderStructure) Export
	 СтруктураШапки=orderStructure.СтруктураШапки;
	 Если СтруктураШапки.НовыйЗаказ=1 Тогда
			ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	 Иначе
			ДокументСсылка = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураШапки.docId));
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Если ЗаказВключенВМАршрутныйЛист(ДокументСсылка)<>Неопределено Тогда
								 orderStructure.Вставить("docRef",Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор()));
								 orderStructure.Вставить("docNumber",Строка(ДокументОбъект.Номер));
				 			 	 Return  Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор());
			КонецЕсли;
	  КонецЕсли;
      ДокументОбъект.Дата=СтруктураШапки.Дата;
      ДокументОбъект.Дата=ДокументОбъект.Дата+(ТекущаяДата()-НачалоДня(ТекущаяДата()));
	  ДокументОбъект.ТорговаяТочка=Справочники.ТорговыеТочкиКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураШапки.ТорговаяТочка));
	  ДатаОтгрузки = РаботаСТорговымиТочками.ПолучитьДатуОтгрузки(ДокументОбъект.Дата, ДокументОбъект.ТорговаяТочка);
	  ДокументОбъект.ЖелаемаяДатаОтгрузки = ДатаОтгрузки;
	  ДокументОбъект.ДатаОтгрузки = ДатаОтгрузки;
	  ДокументОбъект.Валюта = Справочники.Валюты.НайтиПоКоду(980);
	  СтруктТТ = внутрПолучитьКонтрагентаПоТорговойТочке(ДокументОбъект.ТорговаяТочка);
	  ДокументОбъект.Контрагент = СтруктТТ.Контрагент;
	  ДокументОбъект.Партнер = внутрПолучитьПартнераПоКонрагенту(ДокументОбъект.Контрагент);
	  //ДокументОбъект.Организация = СтруктТТ.ОрганизацияДок;
	  Если СтруктураШапки.Склад = "1" Тогда
		   ДокументОбъект.Склад = Справочники.Склады.НайтиПоНаименованию("Главный склад");
	  ИначеЕсли   СтруктураШапки.Склад = "2" Тогда
		   ДокументОбъект.Склад =Справочники.Склады.НайтиПоНаименованию("Розница");
	  КонецЕсли;	
	  /// Организация и склад
	  СвойстваАвтозаполнения = Новый Структура("Организация, Склад, ХозяйственнаяОперация");
	  ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(ДокументОбъект.Ссылка, СвойстваАвтозаполнения);
 	  ЗаполнитьЗначенияСвойств(ДокументОбъект, СвойстваАвтозаполнения);

	  ДокументОбъект.Подразделение =ДокументОбъект.Склад.Подразделение;
	  ДокументОбъект.Менеджер                  = Пользователи.ТекущийПользователь();
	  ДокументОбъект.Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОбъект.Организация);
	  ДокументОбъект.БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДокументОбъект.Организация, , ДокументОбъект.БанковскийСчет);
	  ДокументОбъект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ДокументОбъект.Контрагент, , ДокументОбъект.БанковскийСчетКонтрагента);
	  ДокументОбъект.НалогообложениеНДС        = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	  ДокументОбъект.Статус					  = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке ;
	  ДокументОбъект.НеОтгружатьЧастями        = true;
	  СтруктСоглашение = внутрПолучитьИнфПоСоглашению(ДокументОбъект.ДатаОтгрузки, ДокументОбъект.Партнер, ДокументОбъект.Организация);
	  Если СтруктСоглашение.ЕстьСоглашение Тогда
  			 ДокументОбъект.Соглашение= СтруктСоглашение.Соглашение;
			 ДокументОбъект.ГрафикОплаты=СтруктСоглашение.ГрафикОплаты;
			 ДокументОбъект.ФормаОплаты=СтруктСоглашение.ФормаОплаты;
			 ДокументОбъект.Валюта=СтруктСоглашение.Валюта;
			 ДокументОбъект.ХозяйственнаяОперация=СтруктСоглашение.ХозяйственнаяОперация;
			 ДокументОбъект.Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.ФормаОплаты, ДокументОбъект.Касса);
	  Иначе
		  Возврат "С клиентом нет соглашения!!!";
	  КонецЕсли;	  
	  ДокументОбъект.ЦенаВключаетНДС=Истина;
	  ДокументОбъект.Приоритет = Перечисления.Приоритеты.Средний;
	  ДокументОбъект.АвторасчетНДС = Истина;
	  ДокументОбъект.Самовывоз = ?(СтруктураШапки.Самовывоз="1", Истина, Ложь);
	  ДокументОбъект.ТипПродажи = ?(СтруктураШапки.ТипПродажи="0", Перечисления.ТипыПродажи.ПрямаяПродажа, Перечисления.ТипыПродажи.РозничнаяПродажа);	
	  ДокументОбъект.МаршрутТорговогоПредставителя=РаботаСТорговымиТочками.ПолучитьМаршрутПоТорговойТочке(ДокументОбъект.ТорговаяТочка,ДокументОбъект.ДатаОтгрузки);
	  ДокументОбъект.ТорговыйПредставитель =    РаботаСТорговымиТочками.ПолучитьФизлицоПоМаршруту(ДокументОбъект.ДатаОтгрузки, ДокументОбъект.МаршрутТорговогоПредставителя);
	  
	  //СОздание позиций
	  ДокументОбъект.Товары.Очистить();
	  тзПозиции= orderStructure.Позиции;
	  Для Каждого Позиция из  тзПозиции Цикл
		  ТекНоменклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Позиция.Номенклатура));
		  КоличествоЗаказа=Позиция.qty;
		  СтрокаТовары=ДокументОбъект.Товары.Добавить();	
		  СтрокаТовары.ДатаОтгрузки= ДокументОбъект.ДатаОтгрузки;
		  СтрокаТовары.Номенклатура=ТекНоменклатура;
		  СтрокаТовары.КоличествоУпаковок=КоличествоЗаказа; 
		  СтрокаТовары.Количество=КоличествоЗаказа;
          СтруктураЦена=внутрПолучитьЦену(ДокументОбъект.ДатаОтгрузки, ТекНоменклатура, СтруктСоглашение);
		  СтрокаТовары.ВидЦены  = СтруктСоглашение.ВидЦен;
		  СтрокаТовары.Цена = СтруктураЦена.Цена;
		  СтрокаТовары.Сумма=СтрокаТовары.Цена * КоличествоЗаказа;
		  СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		  //СтавкаНДСЧисло=ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС);
		  СтрокаТовары.СуммаНДС= 0 ; //(СтрокаТовары.Сумма/(1+СтавкаНДСЧисло))*СтавкаНДСЧисло ;
		  СтрокаТовары.СуммаСНДС=СтрокаТовары.Сумма;
		  СтрокаТовары.Склад=ДокументОбъект.Склад;
      КонецЦикла;
			  
	  ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	  ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	  
	  orderStructure.Вставить("docRef",Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор()));
 	  orderStructure.Вставить("docNumber",Строка(ДокументОбъект.Номер));
	  Возврат  ДокументОбъект.Номер;
EndFunction	

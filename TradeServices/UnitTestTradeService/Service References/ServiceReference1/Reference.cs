//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTestTradeService.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILocation")]
    public interface ILocation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetTestString", ReplyAction="http://tempuri.org/ILocation/GetTestStringResponse")]
        string GetTestString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetTestString", ReplyAction="http://tempuri.org/ILocation/GetTestStringResponse")]
        System.Threading.Tasks.Task<string> GetTestStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetAllActiveRoutes", ReplyAction="http://tempuri.org/ILocation/GetAllActiveRoutesResponse")]
        TradeServices.Models.Route[] GetAllActiveRoutes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetAllActiveRoutes", ReplyAction="http://tempuri.org/ILocation/GetAllActiveRoutesResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.Route[]> GetAllActiveRoutesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetRouteTrip", ReplyAction="http://tempuri.org/ILocation/GetRouteTripResponse")]
        TradeServices.Models.RouteTripEx[] GetRouteTrip(string routeTripDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetRouteTrip", ReplyAction="http://tempuri.org/ILocation/GetRouteTripResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.RouteTripEx[]> GetRouteTripAsync(string routeTripDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetCheckIn", ReplyAction="http://tempuri.org/ILocation/GetCheckInResponse")]
        TradeServices.Models.ModelOutletCheckInEx[] GetCheckIn(string routeTripDate, string routeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetCheckIn", ReplyAction="http://tempuri.org/ILocation/GetCheckInResponse")]
        System.Threading.Tasks.Task<TradeServices.Models.ModelOutletCheckInEx[]> GetCheckInAsync(string routeTripDate, string routeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocationChannel : UnitTestTradeService.ServiceReference1.ILocation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocationClient : System.ServiceModel.ClientBase<UnitTestTradeService.ServiceReference1.ILocation>, UnitTestTradeService.ServiceReference1.ILocation {
        
        public LocationClient() {
        }
        
        public LocationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTestString() {
            return base.Channel.GetTestString();
        }
        
        public System.Threading.Tasks.Task<string> GetTestStringAsync() {
            return base.Channel.GetTestStringAsync();
        }
        
        public TradeServices.Models.Route[] GetAllActiveRoutes() {
            return base.Channel.GetAllActiveRoutes();
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.Route[]> GetAllActiveRoutesAsync() {
            return base.Channel.GetAllActiveRoutesAsync();
        }
        
        public TradeServices.Models.RouteTripEx[] GetRouteTrip(string routeTripDate) {
            return base.Channel.GetRouteTrip(routeTripDate);
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.RouteTripEx[]> GetRouteTripAsync(string routeTripDate) {
            return base.Channel.GetRouteTripAsync(routeTripDate);
        }
        
        public TradeServices.Models.ModelOutletCheckInEx[] GetCheckIn(string routeTripDate, string routeId) {
            return base.Channel.GetCheckIn(routeTripDate, routeId);
        }
        
        public System.Threading.Tasks.Task<TradeServices.Models.ModelOutletCheckInEx[]> GetCheckInAsync(string routeTripDate, string routeId) {
            return base.Channel.GetCheckInAsync(routeTripDate, routeId);
        }
    }
}
